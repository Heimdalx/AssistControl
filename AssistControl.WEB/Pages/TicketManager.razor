@page "/ticketManager"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card mx-auto my-4 border-info" style="max-width: 600px;">
    <div class="card-body d-flex justify-content-center">
        <h3 class="text-center">Administrador de entradas</h3>
    </div>
    <div class="card-body d-flex justify-content-center">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div class="mx-2">
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar entrada" value="@TicketIdString" @oninput="@(e => TicketIdString = e.Value!.ToString()!)" />
            </div>
            <div>
                <button type="button" class="btn btn-outline-primary" @onclick="GetAsync">Buscar</button>
            </div>
        </div>
    </div>
</div>

@if (ticket is null)
{
    <div class="card mx-auto border-warning  " style="max-width: 400px">
            
            <div class="card-body">
            <h5>Cargue un ticket</h5>
            </div>
       </div>
}
else
{
    <TicketForm @ref="ticketForm" Ticket="ticket" OnValidSubmit="EditAsync" OnReturnAction="Return" />

}
@code {
    private string? TicketIdString { get; set; }

    public Ticket? ticket;

    private TicketForm? ticketForm;

    [Parameter]
    [SupplyParameterFromQuery]
    public int TicketId { get; set; }

    private async Task GetAsync()
    {
        if (int.TryParse(TicketIdString, out int ticketId))
        {
            TicketId = ticketId;
            var responseHttp = await repository.Get<Ticket>($"/api/tickets/{TicketId}");
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
                {
                    navigationManager.NavigateTo($"/tickets/error/{2}/{0}");
                }
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            ticket = responseHttp.Response!;
            if (ticket.FueUsada)
            {
                ticket = null;
                navigationManager.NavigateTo($"/tickets/error/{1}/{TicketId}");
            }
        }
        else
        {
            ticket = null;
        }

        
    }

    private async Task EditAsync()
    {
        ticket!.FechaDeUso = DateTime.Now;
        var httpResponse = await repository.Put("api/tickets", ticket);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {

        ticketForm!.FormPostedSuccessfully = true;
        ticket = null;
    }
}
